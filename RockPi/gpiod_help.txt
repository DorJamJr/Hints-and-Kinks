Help on package gpiod:

NAME
    gpiod - MIT License

DESCRIPTION
    Copyright (c) 2020-2021 Hyeonki Hong <hhk7734@gmail.com>
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

PACKAGE CONTENTS
    kernel (package)
    libgpiod (package)
    libgpiodcxx (package)
    test (package)

CLASSES
    gpiod.libgpiodcxx.chip(builtins.object)
        chip
    gpiod.libgpiodcxx.chip_iter(builtins.object)
        chip_iter
    gpiod.libgpiodcxx.line(builtins.object)
        line
    gpiod.libgpiodcxx.line_bulk(builtins.object)
        line_bulk
    gpiod.libgpiodcxx.line_event(builtins.object)
        line_event
    gpiod.libgpiodcxx.line_iter(builtins.object)
        line_iter
    gpiod.libgpiodcxx.line_request(builtins.object)
        line_request
    
    class chip(gpiod.libgpiodcxx.chip)
     |  chip(device: 'Optional[Union[int, str]]' = None, how: 'int' = 1, chip_shared: 'Optional[shared_chip]' = None) -> 'None'
     |  
     |  Method resolution order:
     |      chip
     |      gpiod.libgpiodcxx.chip
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.chip:
     |  
     |  __bool__(self) -> 'bool'
     |      @brief Check if this object holds a reference to a GPIO chip.
     |      
     |      @return True if this object references a GPIO chip, false otherwise.
     |      
     |      Usage:
     |          print(bool(chip))
     |          print(not chip)
     |  
     |  __del__(self) -> 'None'
     |      @brief Destructor
     |      
     |      Usage:
     |          del chip
     |  
     |  __eq__(self, rhs: 'chip') -> 'bool'
     |      @brief Equality operator.
     |      
     |      @param rhs: Right-hand side of the equation.
     |      
     |      @return True if rhs references the same chip. False otherwise.
     |      
     |      Usage:
     |          print(chip1 == chip2)
     |  
     |  __init__(self, device: 'Optional[Union[int, str]]' = None, how: 'int' = 1, chip_shared: 'Optional[shared_chip]' = None) -> 'None'
     |      @brief Constructor. Creates an empty GPIO chip object or opens the chip
     |              using chip.open.
     |      
     |      @param device: String describing the GPIO chip.
     |      @param how:    Indicates how the chip should be opened.
     |      
     |      Usage:
     |          c = chip()
     |          c = chip("gpiochip0")
     |          c = chip("/dev/gpiochip0", chip.OPEN_BY_PATH)
     |  
     |  __ne__(self, rhs: 'chip') -> 'bool'
     |      @brief Inequality operator.
     |      
     |      @param rhs: Right-hand side of the equation.
     |      
     |      @return False if rhs references the same chip. True otherwise.
     |      
     |      Usage:
     |          print(chip1 != chip2)
     |  
     |  find_line(self, name: 'str') -> 'line'
     |      @brief Get the line exposed by this chip by name.
     |      
     |      @param name: Line name.
     |      
     |      @return Line object.
     |      
     |      Usage:
     |          l = chip.find_line("PIN_0")
     |  
     |  find_lines(self, names: 'List[str]') -> 'line_bulk'
     |      @brief Get a set of lines exposed by this chip by their names.
     |      
     |      @param names: List of line names.
     |      
     |      @return Set of lines held by a line_bulk object.
     |      
     |      Usage:
     |          lb = chip.find_lines(["PIN_0", "PIN_1", "PIN_2"])
     |  
     |  get_all_lines(self) -> 'line_bulk'
     |      @brief Get all lines exposed by this chip.
     |      
     |      @return All lines exposed by this chip held by a line_bulk object.
     |      
     |      Usage:
     |          lb = chip.get_all_lines()
     |  
     |  get_line(self, offset: 'int') -> 'line'
     |      @brief Get the line exposed by this chip at given offset.
     |      
     |      @param offset: Offset of the line.
     |      
     |      @return Line object
     |      
     |      Usage:
     |          l = chip.get_line(0)
     |  
     |  get_lines(self, offsets: 'List[int]') -> 'line_bulk'
     |      @brief Get a set of lines exposed by this chip at given offsets.
     |      
     |      @param offsets: List of line offsets.
     |      
     |      @return Set of lines held by a line_bulk object.
     |      
     |      Usage:
     |          lb = chip.get_lines([0, 1, 2])
     |  
     |  open(self, device: 'Union[int, str]', how: 'int' = 1) -> 'None'
     |      @brief Open a GPIO chip.
     |      
     |      @param device: String or int describing the GPIO chip.
     |      @param how:    Indicates how the chip should be opened.
     |      
     |      If the object already holds a reference to an open chip, it will be
     |      closed and the reference reset.
     |      
     |      Usage:
     |          chip.open("/dev/gpiochip0")
     |          chip.open(0, chip.OPEN_BY_NUMBER)
     |  
     |  reset(self) -> 'None'
     |      @brief Reset the internal smart pointer owned by this object.
     |      
     |      Usage:
     |          chip.reset()
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from gpiod.libgpiodcxx.chip:
     |  
     |  label
     |      @brief Return the label of the chip held by this object.
     |      
     |      @return Label of the GPIO chip.
     |      
     |      Usage:
     |          print(chip.label)
     |  
     |  name
     |      @brief Return the name of the chip held by this object.
     |      
     |      @return Name of the GPIO chip.
     |      
     |      Usage:
     |          print(chip.name)
     |  
     |  num_lines
     |      @brief Return the number of lines exposed by this chip.
     |      
     |      @return Number of lines.
     |      
     |      Usage:
     |          print(chip.num_lines)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.chip:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from gpiod.libgpiodcxx.chip:
     |  
     |  OPEN_BY_LABEL = 4
     |  
     |  OPEN_BY_NAME = 3
     |  
     |  OPEN_BY_NUMBER = 5
     |  
     |  OPEN_BY_PATH = 2
     |  
     |  OPEN_LOOKUP = 1
     |  
     |  __hash__ = None
    
    class chip_iter(gpiod.libgpiodcxx.chip_iter)
     |  chip_iter() -> 'None'
     |  
     |  Method resolution order:
     |      chip_iter
     |      gpiod.libgpiodcxx.chip_iter
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.chip_iter:
     |  
     |  __init__(self) -> 'None'
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self: 'CI') -> 'CI'
     |  
     |  __next__(self) -> 'chip'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.chip_iter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class line(gpiod.libgpiodcxx.line)
     |  line(line_struct: 'Optional[libgpiod.gpiod_line]' = None, owner: 'chip' = <gpiod.libgpiodcxx.chip object at 0x7f99e85820>) -> 'None'
     |  
     |  Method resolution order:
     |      line
     |      gpiod.libgpiodcxx.line
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.line:
     |  
     |  __bool__(self) -> 'bool'
     |      @brief Check if this object holds a reference to any GPIO line.
     |      
     |      @return True if this object references a GPIO line, false otherwise.
     |      
     |      Usage:
     |          print(bool(line))
     |          print(not line)
     |  
     |  __del__(self) -> 'None'
     |      @brief Destructor
     |      
     |      Usage:
     |          del line
     |  
     |  __eq__(self, rhs: 'line') -> 'bool'
     |      @brief Check if two line objects reference the same GPIO line.
     |      
     |      @param rhs: Right-hand side of the equation.
     |      
     |      @return True if both objects reference the same line, fale otherwise.
     |      
     |      Usage:
     |          print(line1 == line2)
     |  
     |  __init__(self, line_struct: 'Optional[libgpiod.gpiod_line]' = None, owner: 'chip' = <gpiod.libgpiodcxx.chip object at 0x7f99e85820>) -> 'None'
     |      @brief Constructor. Creates an empty line object.
     |      
     |      Usage:
     |          l = line()
     |  
     |  __ne__(self, rhs: 'line') -> 'bool'
     |      @brief Check if two line objects reference different GPIO lines.
     |      
     |      @param rhs: Right-hand side of the equation.
     |      
     |      @return False if both objects reference the same line, true otherwise.
     |      
     |      Usage:
     |          print(line1 != line2)
     |  
     |  event_get_fd(self) -> 'int'
     |      @brief Get the event file descriptor associated with this line.
     |      
     |      @return File descriptor number
     |      
     |      Usage:
     |          fd = line.event_get_fd()
     |  
     |  event_read(self) -> 'line_event'
     |      @brief Read a line event.
     |      
     |      @return Line event object.
     |      
     |      Usage:
     |          if line.event_wait(timedelta(seconds=10)):
     |              event = line.event_read()
     |              print(event.event_type == line_event.RISING_EDGE)
     |              print(event.timestamp)
     |          else:
     |              print("Timeout")
     |  
     |  event_wait(self, timeout: 'timedelta') -> 'bool'
     |      @brief Wait for an event on this line.
     |      
     |      @param timeout: Time to wait before returning if no event occurred.
     |      
     |      @return True if an event occurred and can be read, false if the wait
     |              timed out.
     |      
     |      Usage:
     |          if line.event_wait(timedelta(seconds=10)):
     |              print("An event occurred")
     |          else:
     |              print("Timeout")
     |  
     |  get_chip(self) -> 'chip'
     |      @brief Get the reference to the parent chip.
     |      
     |      @return Reference to the parent chip object.
     |      
     |      Usage:
     |          c = line.get_chip()
     |  
     |  get_value(self) -> 'int'
     |      @brief Read the line value.
     |      
     |      @return Current value (0 or 1).
     |      
     |      Usage:
     |          val = line.get_value()
     |  
     |  is_open_drain(self) -> 'bool'
     |      @brief Check if this line represents an open-drain GPIO.
     |      
     |      @return True if the line is an open-drain GPIO, false otherwise.
     |      
     |      Usage:
     |          print(line.is_open_drain())
     |  
     |  is_open_source(self) -> 'bool'
     |      @brief Check if this line represents an open-source GPIO.
     |      
     |      @return True if the line is an open-source GPIO, false otherwise.
     |      
     |      Usage:
     |          print(line.is_open_source())
     |  
     |  is_requested(self) -> 'bool'
     |      @brief Check if this user has ownership of this line.
     |      
     |      @return True if the user has ownership of this line, false otherwise.
     |      
     |      Usage:
     |          print(line.is_requested())
     |  
     |  is_used(self) -> 'bool'
     |      @brief Check if this line is used by the kernel or other user space
     |             process.
     |      
     |      @return True if this line is in use, false otherwise.
     |      
     |      Usage:
     |          print(line.is_used())
     |  
     |  release(self) -> 'None'
     |      @brief Release the line if it was previously requested.
     |      
     |      Usage:
     |          line.release()
     |  
     |  request(self, config: 'line_request', default_val: 'int' = 0) -> 'None'
     |      @brief Request this line.
     |      
     |      @param config:      Request config (see gpiod.line_request).
     |      @param default_val: Default value - only matters for OUTPUT direction.
     |      
     |      Usage:
     |          config = line_request()
     |          config.consumer = "Application"
     |          config.request_type = line_request.DIRECTION_OUTPUT
     |      
     |          # line.request(config)
     |          line.request(config, 1)
     |  
     |  reset(self) -> 'None'
     |      @brief Reset the state of this object.
     |      
     |      This is useful when the user needs to e.g. keep the line_event object
     |      but wants to drop the reference to the GPIO chip indirectly held by
     |      the line being the source of the event.
     |      
     |      Usage:
     |          line.reset()
     |  
     |  set_config(self, direction: 'int', flags: 'int', value: 'int' = 0) -> 'None'
     |      @brief Set configuration of this line.
     |      
     |      @param direction: New direction.
     |      @param flags:     Replacement flags.
     |      @param value:     New value (0 or 1) - only matters for OUTPUT
     |                        direction.
     |  
     |  set_direction_input(self) -> 'None'
     |      @brief Change the direction this line to input.
     |  
     |  set_direction_output(self, value: 'int' = 0) -> 'None'
     |      @brief Change the direction this lines to output.
     |      
     |      @param value: New value (0 or 1).
     |  
     |  set_flags(self, flags: 'int') -> 'None'
     |      @brief Set configuration flags of this line.
     |      
     |      @param flags: Replacement flags.
     |  
     |  set_value(self, val: 'int') -> 'None'
     |      @brief Set the value of this line.
     |      
     |      @param val: New value (0 or 1).
     |      
     |      Usage:
     |          line.set_value(1)
     |  
     |  update(self) -> 'None'
     |      @brief Re-read the line info from the kernel.
     |      
     |      Usage:
     |          line.update()
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from gpiod.libgpiodcxx.line:
     |  
     |  active_state
     |      @brief Get current active state of this line.
     |      
     |      @return Current active state setting.
     |      
     |      Usage:
     |          print(line.active_state == line.ACTIVE_HIGH)
     |  
     |  bias
     |      @brief Get current bias of this line.
     |      
     |      @return Current bias setting.
     |      
     |      Usage:
     |          print(line.bias == line.BIAS_PULL_UP)
     |  
     |  consumer
     |      @brief Get the consumer of this line (if any).
     |      
     |      @return Name of the consumer of this line or an empty string if it
     |              is unused.
     |      
     |      Usage:
     |          print(line.consumer)
     |  
     |  direction
     |      @brief Get current direction of this line.
     |      
     |      @return Current direction setting.
     |      
     |      Usage:
     |          print(line.direction == line.DIRECTION_INPUT)
     |  
     |  name
     |      @brief Get the name of this line (if any).
     |      
     |      @return Name of this line or an empty string if it is unnamed.
     |      
     |      Usage:
     |          print(line.name)
     |  
     |  offset
     |      @brief Get the offset of this line.
     |      
     |      @return Offet of this line.
     |      
     |      Usage:
     |          print(line.offset)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.line:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from gpiod.libgpiodcxx.line:
     |  
     |  ACTIVE_HIGH = 2
     |  
     |  ACTIVE_LOW = 1
     |  
     |  BIAS_AS_IS = 1
     |  
     |  BIAS_DISABLE = 2
     |  
     |  BIAS_PULL_DOWN = 4
     |  
     |  BIAS_PULL_UP = 3
     |  
     |  DIRECTION_INPUT = 1
     |  
     |  DIRECTION_OUTPUT = 2
     |  
     |  __hash__ = None
    
    class line_bulk(gpiod.libgpiodcxx.line_bulk)
     |  line_bulk(lines: 'Optional[List[line]]' = None) -> 'None'
     |  
     |  Method resolution order:
     |      line_bulk
     |      gpiod.libgpiodcxx.line_bulk
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.line_bulk:
     |  
     |  __bool__(self) -> 'bool'
     |      @brief Check if this object holds any lines.
     |      
     |      @return True if this line_bulk holds at least one line, false otherwise.
     |      
     |      Usage:
     |          print(bool(bulk))
     |          print(not bulk)
     |  
     |  __del__(self) -> 'None'
     |      @brief Destructor
     |      
     |      Usage:
     |          del bulk
     |  
     |  __getitem__(self, offset: 'int') -> 'line'
     |      @brief Get the line at given offset.
     |      
     |      @param offset: Offset of the line to get.
     |      
     |      @return Reference to the line object.
     |      
     |      Usage:
     |          line1 = bulk[1]
     |  
     |  __init__(self, lines: 'Optional[List[line]]' = None) -> 'None'
     |      @brief Constructor. Creates a empty line_bulk or from a list of lines.
     |      
     |      @param lines: List of gpiod::line objects.
     |      
     |      @note All lines must be owned by the same GPIO chip.
     |      
     |      Usage:
     |          bulk = line_bulk()
     |          bulk = line_bulk([line1, line2])
     |  
     |  __iter__(self) -> 'Iterator[line]'
     |      @brief Iterator for iterating over lines held by line_bulk.
     |      
     |      Usage:
     |          for l in bulk:
     |              print(l.name)
     |  
     |  __len__(self) -> 'int'
     |      @brief Get the number of lines currently held by this object.
     |      
     |      @return Number of elements in this line_bulk.
     |      
     |      Usage:
     |          print(len(bulk))
     |  
     |  append(self, new_line: 'line') -> 'None'
     |      @brief Add a line to this line_bulk object.
      |      
     |      @param new_line: Line to add.
     |      
     |      @note The new line must be owned by the same chip as all the other
     |            lines already held by this line_bulk object.
     |      
     |      Usage:
     |          bulk.append(line1)
     |  
     |  clear(self) -> 'None'
     |      @brief Remove all lines from this object.
     |      
     |      Usage:
     |          bulk.clear()
     |  
     |  event_wait(self, timeout: 'timedelta') -> 'line_bulk'
     |      @brief Poll the set of lines for line events.
     |      
     |      @param timeout: timedelta to wait before returning an empty line_bulk.
     |      
     |      @return Returns a line_bulk object containing lines on which events
     |              occurred.
     |      
     |      Usage:
     |          ebulk = bulk.event_wait(timedelta(microseconds=20000))
     |  
     |  get(self, offset: 'int') -> 'line'
     |      @brief Get the line at given offset.
     |      
     |      @param offset: Offset of the line to get.
     |      
     |      @return Reference to the line object.
     |      
     |      Usage:
     |          line1 = bulk.get(1)
     |  
     |  get_values(self) -> 'List[int]'
     |      @brief Read values from all lines held by this object.
     |      
     |      @return List containing line values the order of which corresponds
     |              to the order of lines in the internal array.
     |      
     |      Usage:
     |          ret = bulk.get_values()
     |  
     |  release(self) -> 'None'
     |      @brief Release all lines held by this object.
     |      
     |      Usage:
     |          bulk.release()
     |  
     |  request(self, config: 'line_request', default_vals: 'Optional[List[int]]' = None) -> 'None'
     |      @brief Request all lines held by this object.
     |      
     |      @param config:       Request config (see gpiod::line_request).
     |      @param default_vals: List of default values. Only relevant for output
     |                           direction requests.
     |      
     |      Usage:
     |          config = line_request()
     |          config.consumer = "Application"
     |          config.request_type = line_request.DIRECTION_OUTPUT
     |      
     |          # bulk.request(config)
     |          bulk.request(config, [1] * bulk.size)
     |  
     |  set_config(self, direction: 'int', flags: 'int', values: 'Optional[List[int]]' = None) -> 'None'
     |      @brief Set configuration of all lines held by this object.
     |      
     |      @param direction: New direction.
     |      @param flags:     Replacement flags.
     |      
     |      @param List of values to set. Must be the same size as the number of
     |             lines held by this line_bulk.
     |             Only relevant for output direction requests.
     |  
     |  set_direction_input(self) -> 'None'
     |      @brief Change the direction all lines held by this object to input.
     |  
     |  set_direction_output(self, values: 'Optional[List[int]]' = None) -> 'None'
     |      @brief Change the direction this lines to output.
     |      
     |      @param values: Vector of values to set. Must be the same size as the
     |                     number of lines held by this line_bulk.
     |  
     |  set_flags(self, flags: 'int') -> 'None'
     |      @brief Set configuration flags of all lines held by this object.
     |      
     |      @param flags: Replacement flags.
     |  
     |  set_values(self, values: 'List[int]') -> 'None'
     |      @brief Set values of all lines held by this object.
     |      
     |      @param values: List of values to set. Must be the same size as the
     |             number of lines held by this line_bulk.
     |      
     |      Usage:
     |          bulk.set)_blaues([1] * bulk.size)
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties inherited from gpiod.libgpiodcxx.line_bulk:
     |  
     |  MAX_LINES
     |      @brief Max number of lines that this object can hold.
     |  
     |  empty
     |      @brief Check if this line_bulk doesn't hold any lines.
     |      
     |      @return True if this object is empty, false otherwise.
     |      
     |      Usage:
     |          print(bulk.empty)
     |  
     |  size
     |      @brief Get the number of lines currently held by this object.
     |      
     |      @return Number of elements in this line_bulk.
     |      
     |      Usage:
     |          print(bulk.size)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.line_bulk:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class line_event(gpiod.libgpiodcxx.line_event)
     |  line_event() -> 'None'
     |  
     |  Method resolution order:
     |      line_event
     |      gpiod.libgpiodcxx.line_event
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.line_event:
     |  
     |  __init__(self) -> 'None'
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.line_event:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from gpiod.libgpiodcxx.line_event:
     |  
     |  FALLING_EDGE = 2
     |  
     |  RISING_EDGE = 1
    
    class line_iter(gpiod.libgpiodcxx.line_iter)
     |  line_iter(owner: 'chip') -> 'None'
     |  
     |  Method resolution order:
     |      line_iter
     |      gpiod.libgpiodcxx.line_iter
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.line_iter:
     |  
     |  __init__(self, owner: 'chip') -> 'None'
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self: 'LI') -> 'LI'
     |  
     |  __next__(self) -> 'line'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.line_iter:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class line_request(gpiod.libgpiodcxx.line_request)
     |  line_request() -> 'None'
     |  
     |  Method resolution order:
     |      line_request
     |      gpiod.libgpiodcxx.line_request
     |      builtins.object
     |  
     |  Methods inherited from gpiod.libgpiodcxx.line_request:
     |  
     |  __init__(self) -> 'None'
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from gpiod.libgpiodcxx.line_request:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from gpiod.libgpiodcxx.line_request:
     |  
     |  DIRECTION_AS_IS = 1
     |  
     |  DIRECTION_INPUT = 2
     |  
     |  DIRECTION_OUTPUT = 3
     |  
     |  EVENT_BOTH_EDGES = 6
     |  
     |  EVENT_FALLING_EDGE = 4
     |  
     |  EVENT_RISING_EDGE = 5
     |  
     |  FLAG_ACTIVE_LOW = 1
     |  
     |  FLAG_BIAS_DISABLE = 8
     |  
     |  FLAG_BIAS_PULL_DOWN = 16
     |  
     |  FLAG_BIAS_PULL_UP = 32
     |  
     |  FLAG_OPEN_DRAIN = 4
     |  
     |  FLAG_OPEN_SOURCE = 2

FUNCTIONS
    find_line(name: str) -> gpiod.line
        @brief Find a GPIO line by name. Search all GPIO chips present on the
               system.
        
        @param name: Name of the line.
        
        @return A line object - empty if the line was not found.
    
    make_chip_iter() -> gpiod.chip_iter
        @brief Create a new chip_iter.
        
        @return New chip iterator object pointing to the first GPIO chip on the
                system.
        
        Usage:
            for c in make_chip_iter():
                print(c.label)

FILE
    /jim/jim_venv/lib/python3.9/site-packages/gpiod/__init__.py

:
